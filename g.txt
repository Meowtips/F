# Lista delle righe originali
original_lines = [
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.5304.210 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:88.1) Gecko/20100101 Firefox/88.1",
    "Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:102.0.5) Gecko/20100101 Firefox/102.0.5",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.705.83 Safari/537.36 Edg/88.0.705.83",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.37 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:78.12) Gecko/20100101 Firefox/78.12",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:111.0.1) Gecko/20100101 Firefox/111.0.1"
]

# Aggiungi virgolette a ciascuna riga
formatted_lines = ['"' + line + '"' for line in original_lines]

# Genera il file JSON con le righe formattate
formatted_json = {
    "user_agents": formatted_lines
}

# Stampa il file JSON
print(json.dumps(formatted_json, indent=4))


,.......................

import os, random, time, json, itertools
from selenium import webdriver
import undetected_chromedriver as uc
from fake_useragent import UserAgent
from colorama import Fore

class Viewbot:
    def __init__(self):
        self.config = json.load(open('./data/config.json', 'r+'))
        self.proxies = itertools.cycle(open('./data/proxies.txt').read().splitlines())
        self.ua = UserAgent()
        
        # Carica i dati dei browser dal file JSON "prova.json"
        with open('prova.json', 'r') as f:
            self.user_agents_data = json.load(f)
            self.user_agents_list = self.user_agents_data['user_agents']

    def ui(self):
        os.system('cls && title Youtube Viewbot ^| github.com/Plasmonix' if os.name == "nt" else 'clear') 
        print(f"""{Fore.RED}                                                           
         __ __         _       _          _____ _           _       _     
        |  |  |___ _ _| |_ _ _| |_ ___   |  |  |_|___ _ _ _| |_ ___| |_   
        |_   _| . | | |  _| | | . | -_|  |  |  | | -_| | | | . | . |  _|  
          |_| |___|___|_| |___|___|___|   \___/|_|___|_____|___|___|_|    
        {Fore.RESET}""")

    def open_url(self, sleep_time, proxy):
        self.options = webdriver.ChromeOptions()
        self.options.add_argument("--incognito")
        self.options.add_argument('--start-maximized')
        
        # Utilizza un user agent casuale dai dati locali
        self.options.add_argument('user-agent=%s' % random.choice(self.user_agents_list))
        self.options.add_argument("--proxy-server=%s" % proxy)
        self.options.headless = True

        self.browser = uc.Chrome(options=self.options)
        
        self.browser.get(self.config["url"])
        time.sleep(sleep_time)
        self.browser.quit()

    def main(self):
        self.ui()
        for _ in range(self.config["views"]):
            self.sleeptime = random.randint(self.config["min_watch"], self.config["max_watch"])
            self.open_url(self.sleeptime, next(self.proxies))

if __name__ == "__main__":
    bot = Viewbot()
    bot.main()


.......



{
    "url": "https://www.youtube.com/watch?v=TuoGy9kDQY4",
    "views": 100,  # Numero di visualizzazioni
    "min_watch": 60,  # Durata minima di visualizzazione in secondi
    "max_watch": 120  # Durata massima di visualizzazione in secondi
}
